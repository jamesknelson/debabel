// Generated by CoffeeScript 1.3.3
(function() {
  var PatternEditor, Timer, chrome, delay, gecko, ie, ie_lt8, ie_lt9, ios, khtml, mac, mac_geLion, mac_geMountainLion, make, opera, phantom, qtwebkit, safari, webkit,
    __hasProp = {}.hasOwnProperty;

  gecko = /gecko\/\d/i.test(navigator.userAgent);

  ie = /MSIE \d/.test(navigator.userAgent);

  ie_lt8 = /MSIE [1-7]\b/.test(navigator.userAgent);

  ie_lt9 = /MSIE [1-8]\b/.test(navigator.userAgent);

  webkit = /WebKit\//.test(navigator.userAgent);

  qtwebkit = webkit && /Qt\/\d+\.\d+/.test(navigator.userAgent);

  chrome = /Chrome\//.test(navigator.userAgent);

  opera = /Opera\//.test(navigator.userAgent);

  safari = /Apple Computer/.test(navigator.vendor);

  khtml = /KHTML\//.test(navigator.userAgent);

  mac_geLion = /Mac OS X 1\d\D([7-9]|\d\d)\D/.test(navigator.userAgent);

  mac_geMountainLion = /Mac OS X 1\d\D([8-9]|\d\d)\D/.test(navigator.userAgent);

  phantom = /PhantomJS/.test(navigator.userAgent);

  ios = /AppleWebKit/.test(navigator.userAgent) && /Mobile\/\w+/.test(navigator.userAgent);

  mac = ios || /Mac/.test(navigator.platform);

  delay = function(ms, func) {
    return setTimeout(func, ms);
  };

  Timer = function() {
    return this.id = null;
  };

  Timer.prototype.set = function(ms, f) {
    clearTimeout(this.id);
    return this.id = setTimeout(f, ms);
  };

  make = function(tag, classNames, o) {
    var attr, child, e, hasClassNames, val, _i, _len, _ref, _ref1;
    hasClassNames = typeof classNames === "string";
    o || (o = (!hasClassNames && classNames) || {});
    e = document.createElement(tag);
    if (hasClassNames) {
      e.className = classNames;
    }
    if (o.text) {
      setTextContent(e, o.text);
    }
    if (o.children) {
      _ref = o.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        e.appendChild(child);
      }
    }
    if (o.child) {
      e.appendChild(o.child);
    }
    if (o.attributes) {
      _ref1 = o.attributes;
      for (val in _ref1) {
        attr = _ref1[val];
        e.setAttribute(attr, val);
      }
    }
    return e;
  };

  PatternEditor = (function() {

    function PatternEditor(place, options) {
      var hasFocus, key, value,
        _this = this;
      this.place = place;
      this.options = defaults;
      for (key in options) {
        if (!__hasProp.call(options, key)) continue;
        value = options[key];
        this.options[key] = value;
      }
      this._makeDisplay();
      this._makeView();
      this._makeHistory();
      this.nextOpId = 0;
      if (this.options.autofocus) {
        this.focusInput();
      }
      if (ie) {
        delay(20, function() {
          return _this.resetInput(true);
        });
      }
      this._registerEventHandlers();
      try {
        hasFocus = document.activeElement === display.input;
      } catch (_error) {}
      if (hasFocus || options.autofocus) {
        delay(20, function() {
          return _this._onFocus();
        });
      } else {
        this._onBlur();
      }
    }

    PatternEditor.prototype._makeDisplay = function() {
      var d;
      d = this.display = {};
      d.input = make("input", {
        attributes: {
          autocorrect: "off",
          autocapitalize: "off"
        }
      });
      d.inputWrapper = make("div", "PE-input-wrapper", {
        child: d.input
      });
      d.measurer = make("div", "PE-measurer");
      d.selection = make("div", "PE-selection");
      d.content = make("div");
      d.cursor = make("pre", "PE-cursor", {
        text: "\u00a0"
      });
      d.contentWrapper = make("div", "PE-content-wrapper", {
        children: [d.measurer, d.selection, d.content, d.cursor]
      });
      d.editor = make("div", "PE", {
        children: [d.inputWrapper, d.contentWrapper]
      });
      d.editor.PatternEditor = this;
      place.appendChild(d.editor);
      if (ios) {
        d.input.style.width = "0px";
      }
      if (khtml) {
        d.inputWrapper.style.height = "1px";
        d.inputWrapper.style.position = "absolute";
      }
      d.viewOffset = d.showingFrom = d.showingTo = d.lastSizeC = 0;
      d.prevInput = "";
      d.pollingFast = false;
      d.poll = new Timer;
      return d.pasteIncoming = false;
    };

    PatternEditor.prototype._makeView = function() {
      return this.view = {
        doc: doc,
        frontier: 0,
        highlight: new Timer,
        sel: {
          from: 0,
          to: 0,
          head: 0,
          anchor: 0,
          shift: false,
          extend: false
        },
        scrollTop: 0,
        overwrite: false,
        focused: false,
        suppressEdits: false,
        goalColumn: null,
        cantEdit: false,
        keyMaps: []
      };
    };

    PatternEditor.prototype._makeHistory = function() {
      return this.history = {
        done: [],
        undone: [],
        dirtyCounter: 0
      };
    };

    return PatternEditor;

  })();

}).call(this);
